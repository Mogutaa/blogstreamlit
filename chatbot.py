import os
import re
import requests
from pymongo import TEXT
from database import projects_col, posts_col

class PortfolioChatbot:
    def __init__(self):
        self.api_key = os.getenv("OPENROUTER_API_KEY")
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self._ensure_indexes()

    def _ensure_indexes(self):
        """Cria √≠ndices com pesos diferenciados"""
        try:
            # √çndice com peso maior para t√≠tulos
            if "portfolio_search" not in projects_col.index_information():
                projects_col.create_index(
                    [
                        ("title", TEXT),
                        ("description", TEXT)
                    ],
                    weights={"title": 10, "description": 5},
                    default_language="portuguese",
                    name="portfolio_search"
                )

            if "portfolio_search" not in posts_col.index_information():
                posts_col.create_index(
                    [
                        ("title", TEXT),
                        ("content", TEXT)
                    ],
                    weights={"title": 10, "content": 5},
                    default_language="portuguese",
                    name="portfolio_search"
                )
                
        except Exception as e:
            print(f"Erro nos √≠ndices: {str(e)}")

    def _get_context(self, query):
        """Busca aprimorada com normaliza√ß√£o de texto"""
        try:
            # Normaliza√ß√£o da query
            clean_query = re.sub(r'[^\w\s]', '', query).lower().strip()
            search_terms = [f'"{term}"' for term in clean_query.split() if term]
            
            # Busca combinando operadores OR
            search_query = " ".join(search_terms) if len(search_terms) > 1 else f'"{clean_query}"'
            
            # Busca com proje√ß√£o otimizada
            projects = list(projects_col.find(
                {"$text": {"$search": search_query}},
                {"score": {"$meta": "textScore"}, "title": 1, "description": 1}
            ).sort([("score", {"$meta": "textScore"})]).limit(3))

            posts = list(posts_col.find(
                {"$text": {"$search": search_query}},
                {"score": {"$meta": "textScore"}, "title": 1, "content": 1}
            ).sort([("score", {"$meta": "textScore"})]).limit(3))

            # Constru√ß√£o de contexto enriquecido
            context = []
            
            if projects:
                context.append("### üìÇ Projetos Relevantes\n")
                for proj in projects:
                    desc = proj.get('description', 'Descri√ß√£o n√£o dispon√≠vel')
                    context.append(f"**{proj.get('title', 'Sem t√≠tulo')}**\n{desc[:250]}...")

            if posts:
                context.append("\n### üìù Artigos Relacionados\n")
                for post in posts:
                    content = post.get('content', 'Conte√∫do n√£o dispon√≠vel')
                    context.append(f"**{post.get('title', 'Sem t√≠tulo')}**\n{content[:300]}...")

            return "\n".join(context) if context else "Nenhum dado relevante encontrado no banco de dados."

        except Exception as e:
            print(f"Erro de contexto: {str(e)}")
            return ""

    def generate_response(self, prompt):
        """Sistema de prompts aprimorado"""
        context = self._get_context(prompt)
        
        system_prompt = f"""
          Voc√™ √© o assistente t√©cnico do site pessoal de Alan Jos√©, 
          voc√™ vai responder os visitantes que buscam informa√ß√µes sobre as postagens e projetos no banco de dados.

Diretrizes:
1. Analise cuidadosamente o contexto abaixo e responda com base nas informa√ß√µes dispon√≠veis quando poss√≠vel.
2. Responda usando MARKDOWN com formata√ß√£o simples
3. Seja t√©cnico mas did√°tico
4. Caso n√£o encontre informa√ß√µes procure algo relacionado no banco de dados, Se necess√°rio, pe√ßa mais informa√ß√µes ao usu√°rio
5. Se necess√°rio, pe√ßa mais informa√ß√µes ao usu√°rio
6. N√£o se esque√ßa de ser educado e cordial, mas objetivo
7. N√£o forne√ßa links externos


Contexto dispon√≠vel:
{context if context else 'Nenhum dado encontrado'}"""

        try:
            response = requests.post(
                self.base_url,
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "mistralai/mistral-7b-instruct:free",
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.5,
                    "max_tokens": 1000
                },
                timeout=20
            )

            return response.json()['choices'][0]['message']['content']

        except Exception as e:
            print(f"Erro na API: {str(e)}")
            return "Estou com dificuldades t√©cnicas. Por favor tente mais tarde."

if __name__ == "__main__":
    bot = PortfolioChatbot()
    print("Chatbot T√©cnico - Escreva sua pergunta:")
    while True:
        user_input = input("\nVoc√™: ")
        if user_input.lower() in ["sair", "exit"]:
            break
        print("\nAssistente:", bot.generate_response(user_input))